//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CCEngine {

public class AudioEmitter : Behaviour {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public AudioEmitter(global::System.IntPtr cPtr, bool cMemoryOwn) : base(CherryEnginePINVOKE.AudioEmitter_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(AudioEmitter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CherryEnginePINVOKE.delete_AudioEmitter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Transform m_transform {
    set {
      CherryEnginePINVOKE.AudioEmitter_m_transform_set(swigCPtr, Transform.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CherryEnginePINVOKE.AudioEmitter_m_transform_get(swigCPtr);
      Transform ret = (cPtr == global::System.IntPtr.Zero) ? null : new Transform(cPtr, false);
      return ret;
    } 
  }

  public void Play() {
    CherryEnginePINVOKE.AudioEmitter_Play(swigCPtr);
  }

  public void Pause() {
    CherryEnginePINVOKE.AudioEmitter_Pause(swigCPtr);
  }

  public void Stop() {
    CherryEnginePINVOKE.AudioEmitter_Stop(swigCPtr);
  }

  public void SetLooping(bool loop) {
    CherryEnginePINVOKE.AudioEmitter_SetLooping(swigCPtr, loop);
  }

  public void SetPitch(float value) {
    CherryEnginePINVOKE.AudioEmitter_SetPitch(swigCPtr, value);
  }

  public void SetRollOff(float value) {
    CherryEnginePINVOKE.AudioEmitter_SetRollOff(swigCPtr, value);
  }

  public void SetReferenceDistance(float value) {
    CherryEnginePINVOKE.AudioEmitter_SetReferenceDistance(swigCPtr, value);
  }

  public void SetSpatialized(bool value) {
    CherryEnginePINVOKE.AudioEmitter_SetSpatialized(swigCPtr, value);
  }

  public void AddSound(string filepath) {
    CherryEnginePINVOKE.AudioEmitter_AddSound__SWIG_0(swigCPtr, filepath);
    if (CherryEnginePINVOKE.SWIGPendingException.Pending) throw CherryEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddSound(Sound sound) {
    CherryEnginePINVOKE.AudioEmitter_AddSound__SWIG_1(swigCPtr, Sound.getCPtr(sound));
  }

  public bool GetLooping() {
    bool ret = CherryEnginePINVOKE.AudioEmitter_GetLooping(swigCPtr);
    return ret;
  }

  public bool GetSpatialized() {
    bool ret = CherryEnginePINVOKE.AudioEmitter_GetSpatialized(swigCPtr);
    return ret;
  }

  public float GetRollOff() {
    float ret = CherryEnginePINVOKE.AudioEmitter_GetRollOff(swigCPtr);
    return ret;
  }

  public float GetReferenceDistance() {
    float ret = CherryEnginePINVOKE.AudioEmitter_GetReferenceDistance(swigCPtr);
    return ret;
  }

  public float GetPitch() {
    float ret = CherryEnginePINVOKE.AudioEmitter_GetPitch(swigCPtr);
    return ret;
  }

  public string GetSoundPath() {
    string ret = CherryEnginePINVOKE.AudioEmitter_GetSoundPath(swigCPtr);
    return ret;
  }

}

}
