//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CCEngine {

public class PhysicActor : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public PhysicActor(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(PhysicActor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PhysicActor() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CherryEnginePINVOKE.delete_PhysicActor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public void AddForce(Vector3 force, EForceMode mode) {
    CherryEnginePINVOKE.PhysicActor_AddForce(swigCPtr, Vector3.getCPtr(force), (int)mode);
    if (CherryEnginePINVOKE.SWIGPendingException.Pending) throw CherryEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddTorque(Vector3 force, EForceMode mode) {
    CherryEnginePINVOKE.PhysicActor_AddTorque(swigCPtr, Vector3.getCPtr(force), (int)mode);
    if (CherryEnginePINVOKE.SWIGPendingException.Pending) throw CherryEnginePINVOKE.SWIGPendingException.Retrieve();
  }

  public RaycastHit Raycast(Vector3 origin, Vector3 dir, float maxRange) {
    RaycastHit ret = new RaycastHit(CherryEnginePINVOKE.PhysicActor_Raycast(swigCPtr, Vector3.getCPtr(origin), Vector3.getCPtr(dir), maxRange), true);
    if (CherryEnginePINVOKE.SWIGPendingException.Pending) throw CherryEnginePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetEnabled(bool isEnabled) {
    CherryEnginePINVOKE.PhysicActor_SetEnabled(swigCPtr, isEnabled);
  }

  public bool GetEnabled() {
    bool ret = CherryEnginePINVOKE.PhysicActor_GetEnabled(swigCPtr);
    return ret;
  }

  public Entity m_owner {
    get {
      global::System.IntPtr cPtr = CherryEnginePINVOKE.PhysicActor_m_owner_get(swigCPtr);
      Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
      return ret;
    } 
  }

  public bool HasRigidbody() {
    bool ret = CherryEnginePINVOKE.PhysicActor_HasRigidbody(swigCPtr);
    return ret;
  }

  public bool HasColliders() {
    bool ret = CherryEnginePINVOKE.PhysicActor_HasColliders(swigCPtr);
    return ret;
  }

}

}
