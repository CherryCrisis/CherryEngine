//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CCEngine {

public class InputManager : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  public InputManager(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  public static global::System.Runtime.InteropServices.HandleRef getCPtr(InputManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~InputManager() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CherryEnginePINVOKE.delete_InputManager(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static bool GetKey(Keycode key) {
    bool ret = CherryEnginePINVOKE.InputManager_GetKey__SWIG_0((int)key);
    return ret;
  }

  public static bool GetKeyDown(Keycode key) {
    bool ret = CherryEnginePINVOKE.InputManager_GetKeyDown__SWIG_0((int)key);
    return ret;
  }

  public static bool GetKeyUp(Keycode key) {
    bool ret = CherryEnginePINVOKE.InputManager_GetKeyUp__SWIG_0((int)key);
    return ret;
  }

  public static bool GetKey(string keyName) {
    bool ret = CherryEnginePINVOKE.InputManager_GetKey__SWIG_1(keyName);
    return ret;
  }

  public static bool GetKeyDown(string keyName) {
    bool ret = CherryEnginePINVOKE.InputManager_GetKeyDown__SWIG_1(keyName);
    return ret;
  }

  public static bool GetKeyUp(string keyName) {
    bool ret = CherryEnginePINVOKE.InputManager_GetKeyUp__SWIG_1(keyName);
    return ret;
  }

  public static float GetAxis(string axisName) {
    float ret = CherryEnginePINVOKE.InputManager_GetAxis(axisName);
    return ret;
  }

  public static Vector2 GetMouseWheel() {
    Vector2 ret = new Vector2(CherryEnginePINVOKE.InputManager_GetMouseWheel(), true);
    return ret;
  }

  public static Vector2 GetMousePos() {
    Vector2 ret = new Vector2(CherryEnginePINVOKE.InputManager_GetMousePos(), true);
    return ret;
  }

  public static Vector2 GetMouseDelta() {
    Vector2 ret = new Vector2(CherryEnginePINVOKE.InputManager_GetMouseDelta(), true);
    return ret;
  }

  public static void SetUIFocus(bool value) {
    CherryEnginePINVOKE.InputManager_SetUIFocus(value);
  }

  public static bool IsUIFocused() {
    bool ret = CherryEnginePINVOKE.InputManager_IsUIFocused();
    return ret;
  }

  public static void SetCursorHidden() {
    CherryEnginePINVOKE.InputManager_SetCursorHidden();
  }

  public static void SetCursorDisplayed() {
    CherryEnginePINVOKE.InputManager_SetCursorDisplayed();
  }

}

}
