//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace CCEngine {

public class Mesh : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal Mesh(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Mesh obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Mesh() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          CherryEnginePINVOKE.delete_Mesh(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static void CreateCylinder(Mesh mesh, float radius, float halfHeight, float longitude) {
    CherryEnginePINVOKE.Mesh_CreateCylinder(Mesh.getCPtr(mesh), radius, halfHeight, longitude);
  }

  public static void CreateSphere(Mesh mesh, float radius, float latitude, float longitude) {
    CherryEnginePINVOKE.Mesh_CreateSphere(Mesh.getCPtr(mesh), radius, latitude, longitude);
  }

  public static void CreateCube(Mesh mesh, float xHalfRes, float yHalfRes, float zHalfRes) {
    CherryEnginePINVOKE.Mesh_CreateCube(Mesh.getCPtr(mesh), xHalfRes, yHalfRes, zHalfRes);
  }

  public static void CreateQuad(Mesh mesh, float xHalfRes, float yHalfRes) {
    CherryEnginePINVOKE.Mesh_CreateQuad(Mesh.getCPtr(mesh), xHalfRes, yHalfRes);
  }

}

}
