/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_CherryEngine(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_CherryEngine(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_CherryEngine(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


	#include "keycode.hpp"

	#include "singleton.hpp"
	#include "input_manager.hpp"


#include <string>


	#include "singleton.hpp"
	#include "time_manager.hpp"


	#include "debug.hpp"



	#include "behaviour.hpp"
	#include "component.hpp"


	#include "component.hpp"


	#include "entity.hpp"


	#include "maths.hpp"

	using namespace CCMaths;


	#include "maths/vector2.hpp"


	#include "maths/vector3.hpp"


	#include "maths/vector4.hpp"


	#include "transform.hpp"
	#include "behaviour.hpp"
	#include "maths.hpp"


	#include "camera_component.hpp"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ccengine_wrap.h"

SwigDirector_Behaviour::SwigDirector_Behaviour() : Behaviour(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_Behaviour::~SwigDirector_Behaviour() {
  
}


void SwigDirector_Behaviour::swig_connect_director() {
  
}

void SwigDirector_Behaviour::swig_init_callbacks() {
  
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_InputManager_GetInstance() {
  void * jresult ;
  InputManager *result = 0 ;
  
  result = (InputManager *)InputManager::GetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCEngine_InputManager_GetKey__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  InputManager *arg1 = (InputManager *) 0 ;
  Keycode arg2 ;
  bool result;
  
  arg1 = (InputManager *)jarg1; 
  arg2 = (Keycode)jarg2; 
  result = (bool)(arg1)->GetKey(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCEngine_InputManager_GetKeyDown__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  InputManager *arg1 = (InputManager *) 0 ;
  Keycode arg2 ;
  bool result;
  
  arg1 = (InputManager *)jarg1; 
  arg2 = (Keycode)jarg2; 
  result = (bool)(arg1)->GetKeyDown(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCEngine_InputManager_GetKeyUp__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  InputManager *arg1 = (InputManager *) 0 ;
  Keycode arg2 ;
  bool result;
  
  arg1 = (InputManager *)jarg1; 
  arg2 = (Keycode)jarg2; 
  result = (bool)(arg1)->GetKeyUp(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCEngine_InputManager_GetKey__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  InputManager *arg1 = (InputManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (InputManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->GetKey((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCEngine_InputManager_GetKeyDown__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  InputManager *arg1 = (InputManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (InputManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->GetKeyDown((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCEngine_InputManager_GetKeyUp__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  InputManager *arg1 = (InputManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (InputManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->GetKeyUp((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_InputManager_GetAxis(void * jarg1, char * jarg2) {
  float jresult ;
  InputManager *arg1 = (InputManager *) 0 ;
  char *arg2 = (char *) 0 ;
  float result;
  
  arg1 = (InputManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (float)(arg1)->GetAxis((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_InputManager_GetMouseWheel(void * jarg1) {
  void * jresult ;
  InputManager *arg1 = (InputManager *) 0 ;
  CCMaths::Vector2 result;
  
  arg1 = (InputManager *)jarg1; 
  result = (arg1)->GetMouseWheel();
  jresult = new CCMaths::Vector2((const CCMaths::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_InputManager_GetMousePos(void * jarg1) {
  void * jresult ;
  InputManager *arg1 = (InputManager *) 0 ;
  CCMaths::Vector2 result;
  
  arg1 = (InputManager *)jarg1; 
  result = (arg1)->GetMousePos();
  jresult = new CCMaths::Vector2((const CCMaths::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_InputManager_GetMouseDelta(void * jarg1) {
  void * jresult ;
  InputManager *arg1 = (InputManager *) 0 ;
  CCMaths::Vector2 result;
  
  arg1 = (InputManager *)jarg1; 
  result = (arg1)->GetMouseDelta();
  jresult = new CCMaths::Vector2((const CCMaths::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_InputManager_SetContext(void * jarg1, char * jarg2) {
  InputManager *arg1 = (InputManager *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (InputManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetContext((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_delete_InputManager(void * jarg1) {
  InputManager *arg1 = (InputManager *) 0 ;
  
  arg1 = (InputManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Time_GetInstance() {
  void * jresult ;
  TimeManager *result = 0 ;
  
  result = (TimeManager *)TimeManager::GetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Time_GetDeltaTime(void * jarg1) {
  float jresult ;
  TimeManager *arg1 = (TimeManager *) 0 ;
  float result;
  
  arg1 = (TimeManager *)jarg1; 
  result = (float)(arg1)->GetDeltaTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Time_GetTimeScale(void * jarg1) {
  float jresult ;
  TimeManager *arg1 = (TimeManager *) 0 ;
  float result;
  
  arg1 = (TimeManager *)jarg1; 
  result = (float)(arg1)->GetTimeScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Time_GetFixedDeltaTime(void * jarg1) {
  float jresult ;
  TimeManager *arg1 = (TimeManager *) 0 ;
  float result;
  
  arg1 = (TimeManager *)jarg1; 
  result = (float)(arg1)->GetFixedDeltaTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CCEngine_Time_GetElapsedTime(void * jarg1) {
  double jresult ;
  TimeManager *arg1 = (TimeManager *) 0 ;
  double result;
  
  arg1 = (TimeManager *)jarg1; 
  result = (double)(arg1)->GetElapsedTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Time_SetTimeScale(void * jarg1, float jarg2) {
  TimeManager *arg1 = (TimeManager *) 0 ;
  float arg2 ;
  
  arg1 = (TimeManager *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetTimeScale(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Time_SetFixedDeltaTime(void * jarg1, float jarg2) {
  TimeManager *arg1 = (TimeManager *) 0 ;
  float arg2 ;
  
  arg1 = (TimeManager *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetFixedDeltaTime(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_delete_Time(void * jarg1) {
  TimeManager *arg1 = (TimeManager *) 0 ;
  
  arg1 = (TimeManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Debug_GetInstance() {
  void * jresult ;
  Debug *result = 0 ;
  
  result = (Debug *)Debug::GetInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Debug_Log(void * jarg1, char * jarg2) {
  Debug *arg1 = (Debug *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Debug *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->Log((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_delete_Debug(void * jarg1) {
  Debug *arg1 = (Debug *) 0 ;
  
  arg1 = (Debug *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_new_Component() {
  void * jresult ;
  Component *result = 0 ;
  
  result = (Component *)new Component();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_delete_Component(void * jarg1) {
  Component *arg1 = (Component *) 0 ;
  
  arg1 = (Component *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_delete_Behaviour(void * jarg1) {
  Behaviour *arg1 = (Behaviour *) 0 ;
  
  arg1 = (Behaviour *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Behaviour_GetHost(void * jarg1) {
  void * jresult ;
  Behaviour *arg1 = (Behaviour *) 0 ;
  Entity *result = 0 ;
  
  arg1 = (Behaviour *)jarg1; 
  result = (Entity *) &(arg1)->GetHost();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_new_Behaviour() {
  void * jresult ;
  Behaviour *result = 0 ;
  
  result = (Behaviour *)new SwigDirector_Behaviour();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Behaviour_director_connect(void *objarg) {
  Behaviour *obj = (Behaviour *)objarg;
  SwigDirector_Behaviour *director = static_cast<SwigDirector_Behaviour *>(obj);
  director->swig_connect_director();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_new_Entity__SWIG_0() {
  void * jresult ;
  Entity *result = 0 ;
  
  result = (Entity *)new Entity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_new_Entity__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  Entity *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (Entity *)new Entity((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_delete_Entity(void * jarg1) {
  Entity *arg1 = (Entity *) 0 ;
  
  arg1 = (Entity *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Entity_Destroy(void * jarg1) {
  Entity *arg1 = (Entity *) 0 ;
  
  arg1 = (Entity *)jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CCEngine_Entity_GetName(void * jarg1) {
  char * jresult ;
  Entity *arg1 = (Entity *) 0 ;
  std::string result;
  
  arg1 = (Entity *)jarg1; 
  result = (arg1)->GetName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Entity_GetCameraComponent(void * jarg1) {
  void * jresult ;
  Entity *arg1 = (Entity *) 0 ;
  CameraComponent *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (CameraComponent *)(arg1)->SWIGTEMPLATEDISAMBIGUATOR GetBehaviour< CameraComponent >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Entity_AddCameraComponent(void * jarg1) {
  void * jresult ;
  Entity *arg1 = (Entity *) 0 ;
  CameraComponent *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (CameraComponent *)(arg1)->SWIGTEMPLATEDISAMBIGUATOR AddBehaviour< CameraComponent >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Entity_GetTransform(void * jarg1) {
  void * jresult ;
  Entity *arg1 = (Entity *) 0 ;
  Transform *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (Transform *)(arg1)->SWIGTEMPLATEDISAMBIGUATOR GetBehaviour< Transform >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Entity_AddTransform(void * jarg1) {
  void * jresult ;
  Entity *arg1 = (Entity *) 0 ;
  Transform *result = 0 ;
  
  arg1 = (Entity *)jarg1; 
  result = (Transform *)(arg1)->SWIGTEMPLATEDISAMBIGUATOR AddBehaviour< Transform >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector2_x_set(void * jarg1, float jarg2) {
  CCMaths::Vector2 *arg1 = (CCMaths::Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector2_x_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector2 *arg1 = (CCMaths::Vector2 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector2 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector2_y_set(void * jarg1, float jarg2) {
  CCMaths::Vector2 *arg1 = (CCMaths::Vector2 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector2_y_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector2 *arg1 = (CCMaths::Vector2 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector2 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector2_data_set(void * jarg1, void * jarg2) {
  CCMaths::Vector2 *arg1 = (CCMaths::Vector2 *) 0 ;
  float *arg2 ;
  
  arg1 = (CCMaths::Vector2 *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->data;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector2_data_get(void * jarg1) {
  void * jresult ;
  CCMaths::Vector2 *arg1 = (CCMaths::Vector2 *) 0 ;
  float *result = 0 ;
  
  arg1 = (CCMaths::Vector2 *)jarg1; 
  result = (float *)(float *) ((arg1)->data);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_new_Vector2__SWIG_0() {
  void * jresult ;
  CCMaths::Vector2 *result = 0 ;
  
  result = (CCMaths::Vector2 *)new CCMaths::Vector2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_new_Vector2__SWIG_1(float jarg1) {
  void * jresult ;
  float arg1 ;
  CCMaths::Vector2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (CCMaths::Vector2 *)new CCMaths::Vector2(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_new_Vector2__SWIG_2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  CCMaths::Vector2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (CCMaths::Vector2 *)new CCMaths::Vector2(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector2_operator_add__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  CCMaths::Vector2 *arg1 = (CCMaths::Vector2 *) 0 ;
  CCMaths::Vector2 *arg2 = 0 ;
  CCMaths::Vector2 result;
  
  arg1 = (CCMaths::Vector2 *)jarg1; 
  arg2 = (CCMaths::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CCMaths::Vector2 const & type is null", 0);
    return 0;
  } 
  result = ((CCMaths::Vector2 const *)arg1)->operator +((CCMaths::Vector2 const &)*arg2);
  jresult = new CCMaths::Vector2((const CCMaths::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector2_operator_add__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  CCMaths::Vector2 *arg1 = (CCMaths::Vector2 *) 0 ;
  float arg2 ;
  CCMaths::Vector2 result;
  
  arg1 = (CCMaths::Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((CCMaths::Vector2 const *)arg1)->operator +(arg2);
  jresult = new CCMaths::Vector2((const CCMaths::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector2_operator_substract__SWIG_0(void * jarg1) {
  void * jresult ;
  CCMaths::Vector2 *arg1 = (CCMaths::Vector2 *) 0 ;
  CCMaths::Vector2 result;
  
  arg1 = (CCMaths::Vector2 *)jarg1; 
  result = ((CCMaths::Vector2 const *)arg1)->operator -();
  jresult = new CCMaths::Vector2((const CCMaths::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector2_operator_substract__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  CCMaths::Vector2 *arg1 = (CCMaths::Vector2 *) 0 ;
  CCMaths::Vector2 *arg2 = 0 ;
  CCMaths::Vector2 result;
  
  arg1 = (CCMaths::Vector2 *)jarg1; 
  arg2 = (CCMaths::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CCMaths::Vector2 const & type is null", 0);
    return 0;
  } 
  result = ((CCMaths::Vector2 const *)arg1)->operator -((CCMaths::Vector2 const &)*arg2);
  jresult = new CCMaths::Vector2((const CCMaths::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector2_operator_substract__SWIG_2(void * jarg1, float jarg2) {
  void * jresult ;
  CCMaths::Vector2 *arg1 = (CCMaths::Vector2 *) 0 ;
  float arg2 ;
  CCMaths::Vector2 result;
  
  arg1 = (CCMaths::Vector2 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((CCMaths::Vector2 const *)arg1)->operator -(arg2);
  jresult = new CCMaths::Vector2((const CCMaths::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector2_Dot__SWIG_0(void * jarg1, void * jarg2) {
  float jresult ;
  CCMaths::Vector2 *arg1 = (CCMaths::Vector2 *) 0 ;
  CCMaths::Vector2 *arg2 = 0 ;
  float result;
  
  arg1 = (CCMaths::Vector2 *)jarg1; 
  arg2 = (CCMaths::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CCMaths::Vector2 const & type is null", 0);
    return 0;
  } 
  result = (float)((CCMaths::Vector2 const *)arg1)->Dot((CCMaths::Vector2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector2_SquareLength(void * jarg1) {
  float jresult ;
  CCMaths::Vector2 *arg1 = (CCMaths::Vector2 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector2 *)jarg1; 
  result = (float)((CCMaths::Vector2 const *)arg1)->SquareLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector2_Length(void * jarg1) {
  float jresult ;
  CCMaths::Vector2 *arg1 = (CCMaths::Vector2 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector2 *)jarg1; 
  result = (float)((CCMaths::Vector2 const *)arg1)->Length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector2_Normalize__SWIG_0(void * jarg1) {
  void * jresult ;
  CCMaths::Vector2 *arg1 = (CCMaths::Vector2 *) 0 ;
  CCMaths::Vector2 *result = 0 ;
  
  arg1 = (CCMaths::Vector2 *)jarg1; 
  result = (CCMaths::Vector2 *) &(arg1)->Normalize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector2_Normalize__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  CCMaths::Vector2 *arg1 = (CCMaths::Vector2 *) 0 ;
  CCMaths::Vector2 *arg2 = 0 ;
  CCMaths::Vector2 *result = 0 ;
  
  arg1 = (CCMaths::Vector2 *)jarg1; 
  arg2 = (CCMaths::Vector2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CCMaths::Vector2 & type is null", 0);
    return 0;
  } 
  result = (CCMaths::Vector2 *) &(arg1)->Normalize(*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector2_Normalized__SWIG_0(void * jarg1) {
  void * jresult ;
  CCMaths::Vector2 *arg1 = (CCMaths::Vector2 *) 0 ;
  CCMaths::Vector2 result;
  
  arg1 = (CCMaths::Vector2 *)jarg1; 
  result = ((CCMaths::Vector2 const *)arg1)->Normalized();
  jresult = new CCMaths::Vector2((const CCMaths::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector2_XAxis_get() {
  void * jresult ;
  CCMaths::Vector2 *result = 0 ;
  
  result = (CCMaths::Vector2 *)&CCMaths::Vector2::XAxis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector2_YAxis_get() {
  void * jresult ;
  CCMaths::Vector2 *result = 0 ;
  
  result = (CCMaths::Vector2 *)&CCMaths::Vector2::YAxis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector2_Zero_get() {
  void * jresult ;
  CCMaths::Vector2 *result = 0 ;
  
  result = (CCMaths::Vector2 *)&CCMaths::Vector2::Zero;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector2_One_get() {
  void * jresult ;
  CCMaths::Vector2 *result = 0 ;
  
  result = (CCMaths::Vector2 *)&CCMaths::Vector2::One;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_delete_Vector2(void * jarg1) {
  CCMaths::Vector2 *arg1 = (CCMaths::Vector2 *) 0 ;
  
  arg1 = (CCMaths::Vector2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector3_x_set(void * jarg1, float jarg2) {
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector3_x_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector3_y_set(void * jarg1, float jarg2) {
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector3_y_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector3_z_set(void * jarg1, float jarg2) {
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector3_z_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector3_r_set(void * jarg1, float jarg2) {
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector3_r_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  result = (float) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector3_g_set(void * jarg1, float jarg2) {
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector3_g_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  result = (float) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector3_b_set(void * jarg1, float jarg2) {
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector3_b_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  result = (float) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector3_pitch_set(void * jarg1, float jarg2) {
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->pitch = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector3_pitch_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  result = (float) ((arg1)->pitch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector3_yaw_set(void * jarg1, float jarg2) {
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->yaw = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector3_yaw_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  result = (float) ((arg1)->yaw);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector3_roll_set(void * jarg1, float jarg2) {
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->roll = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector3_roll_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  result = (float) ((arg1)->roll);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector3_data_set(void * jarg1, void * jarg2) {
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float *arg2 ;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->data;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_data_get(void * jarg1) {
  void * jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float *result = 0 ;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  result = (float *)(float *) ((arg1)->data);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector3_xy_set(void * jarg1, void * jarg2) {
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  CCMaths::Vector2 *arg2 = (CCMaths::Vector2 *) 0 ;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  arg2 = (CCMaths::Vector2 *)jarg2; 
  if (arg1) (arg1)->xy = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_xy_get(void * jarg1) {
  void * jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  CCMaths::Vector2 *result = 0 ;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  result = (CCMaths::Vector2 *)& ((arg1)->xy);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_new_Vector3__SWIG_0() {
  void * jresult ;
  CCMaths::Vector3 *result = 0 ;
  
  result = (CCMaths::Vector3 *)new CCMaths::Vector3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_new_Vector3__SWIG_1(float jarg1) {
  void * jresult ;
  float arg1 ;
  CCMaths::Vector3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (CCMaths::Vector3 *)new CCMaths::Vector3(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_new_Vector3__SWIG_2(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  CCMaths::Vector3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (CCMaths::Vector3 *)new CCMaths::Vector3(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_new_Vector3__SWIG_3(void * jarg1, float jarg2) {
  void * jresult ;
  CCMaths::Vector2 *arg1 = 0 ;
  float arg2 ;
  CCMaths::Vector3 *result = 0 ;
  
  arg1 = (CCMaths::Vector2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CCMaths::Vector2 const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (CCMaths::Vector3 *)new CCMaths::Vector3((CCMaths::Vector2 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_operator_add__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  CCMaths::Vector3 *arg2 = 0 ;
  CCMaths::Vector3 result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  arg2 = (CCMaths::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CCMaths::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((CCMaths::Vector3 const *)arg1)->operator +((CCMaths::Vector3 const &)*arg2);
  jresult = new CCMaths::Vector3((const CCMaths::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_operator_add__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float arg2 ;
  CCMaths::Vector3 result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((CCMaths::Vector3 const *)arg1)->operator +(arg2);
  jresult = new CCMaths::Vector3((const CCMaths::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_operator_substract__SWIG_0(void * jarg1) {
  void * jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  CCMaths::Vector3 result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  result = ((CCMaths::Vector3 const *)arg1)->operator -();
  jresult = new CCMaths::Vector3((const CCMaths::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_operator_substract__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  CCMaths::Vector3 *arg2 = 0 ;
  CCMaths::Vector3 result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  arg2 = (CCMaths::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CCMaths::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((CCMaths::Vector3 const *)arg1)->operator -((CCMaths::Vector3 const &)*arg2);
  jresult = new CCMaths::Vector3((const CCMaths::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_operator_substract__SWIG_2(void * jarg1, float jarg2) {
  void * jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float arg2 ;
  CCMaths::Vector3 result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((CCMaths::Vector3 const *)arg1)->operator -(arg2);
  jresult = new CCMaths::Vector3((const CCMaths::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector3_Dot__SWIG_0(void * jarg1, void * jarg2) {
  float jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  CCMaths::Vector3 *arg2 = 0 ;
  float result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  arg2 = (CCMaths::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CCMaths::Vector3 const & type is null", 0);
    return 0;
  } 
  result = (float)((CCMaths::Vector3 const *)arg1)->Dot((CCMaths::Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_Cross__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  CCMaths::Vector3 *arg2 = 0 ;
  CCMaths::Vector3 result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  arg2 = (CCMaths::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CCMaths::Vector3 const & type is null", 0);
    return 0;
  } 
  result = ((CCMaths::Vector3 const *)arg1)->Cross((CCMaths::Vector3 const &)*arg2);
  jresult = new CCMaths::Vector3((const CCMaths::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector3_SquareLength(void * jarg1) {
  float jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  result = (float)((CCMaths::Vector3 const *)arg1)->SquareLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector3_Length(void * jarg1) {
  float jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  result = (float)((CCMaths::Vector3 const *)arg1)->Length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_Normalize__SWIG_0(void * jarg1) {
  void * jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  CCMaths::Vector3 *result = 0 ;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  result = (CCMaths::Vector3 *) &(arg1)->Normalize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_Normalize__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  CCMaths::Vector3 *arg2 = 0 ;
  CCMaths::Vector3 *result = 0 ;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  arg2 = (CCMaths::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CCMaths::Vector3 & type is null", 0);
    return 0;
  } 
  result = (CCMaths::Vector3 *) &(arg1)->Normalize(*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_Normalized__SWIG_0(void * jarg1) {
  void * jresult ;
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  CCMaths::Vector3 result;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  result = ((CCMaths::Vector3 const *)arg1)->Normalized();
  jresult = new CCMaths::Vector3((const CCMaths::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_XAxis_get() {
  void * jresult ;
  CCMaths::Vector3 *result = 0 ;
  
  result = (CCMaths::Vector3 *)&CCMaths::Vector3::XAxis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_YAxis_get() {
  void * jresult ;
  CCMaths::Vector3 *result = 0 ;
  
  result = (CCMaths::Vector3 *)&CCMaths::Vector3::YAxis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_ZAxis_get() {
  void * jresult ;
  CCMaths::Vector3 *result = 0 ;
  
  result = (CCMaths::Vector3 *)&CCMaths::Vector3::ZAxis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_Forward_get() {
  void * jresult ;
  CCMaths::Vector3 *result = 0 ;
  
  result = (CCMaths::Vector3 *)&CCMaths::Vector3::Forward;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_Up_get() {
  void * jresult ;
  CCMaths::Vector3 *result = 0 ;
  
  result = (CCMaths::Vector3 *)&CCMaths::Vector3::Up;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_Right_get() {
  void * jresult ;
  CCMaths::Vector3 *result = 0 ;
  
  result = (CCMaths::Vector3 *)&CCMaths::Vector3::Right;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_Zero_get() {
  void * jresult ;
  CCMaths::Vector3 *result = 0 ;
  
  result = (CCMaths::Vector3 *)&CCMaths::Vector3::Zero;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector3_One_get() {
  void * jresult ;
  CCMaths::Vector3 *result = 0 ;
  
  result = (CCMaths::Vector3 *)&CCMaths::Vector3::One;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_delete_Vector3(void * jarg1) {
  CCMaths::Vector3 *arg1 = (CCMaths::Vector3 *) 0 ;
  
  arg1 = (CCMaths::Vector3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector4_x_set(void * jarg1, float jarg2) {
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector4_x_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector4_y_set(void * jarg1, float jarg2) {
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector4_y_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector4_z_set(void * jarg1, float jarg2) {
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector4_z_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector4_w_set(void * jarg1, float jarg2) {
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector4_w_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector4_r_set(void * jarg1, float jarg2) {
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector4_r_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  result = (float) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector4_g_set(void * jarg1, float jarg2) {
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector4_g_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  result = (float) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector4_b_set(void * jarg1, float jarg2) {
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector4_b_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  result = (float) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector4_a_set(void * jarg1, float jarg2) {
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector4_a_get(void * jarg1) {
  float jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  result = (float) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector4_data_set(void * jarg1, void * jarg2) {
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float *arg2 ;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->data;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector4_data_get(void * jarg1) {
  void * jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float *result = 0 ;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  result = (float *)(float *) ((arg1)->data);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector4_xyz_set(void * jarg1, void * jarg2) {
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  CCMaths::Vector3 *arg2 = (CCMaths::Vector3 *) 0 ;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  arg2 = (CCMaths::Vector3 *)jarg2; 
  if (arg1) (arg1)->xyz = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector4_xyz_get(void * jarg1) {
  void * jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  CCMaths::Vector3 *result = 0 ;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  result = (CCMaths::Vector3 *)& ((arg1)->xyz);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Vector4_rgb_set(void * jarg1, void * jarg2) {
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  CCMaths::Vector3 *arg2 = (CCMaths::Vector3 *) 0 ;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  arg2 = (CCMaths::Vector3 *)jarg2; 
  if (arg1) (arg1)->rgb = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector4_rgb_get(void * jarg1) {
  void * jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  CCMaths::Vector3 *result = 0 ;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  result = (CCMaths::Vector3 *)& ((arg1)->rgb);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_new_Vector4__SWIG_0() {
  void * jresult ;
  CCMaths::Vector4 *result = 0 ;
  
  result = (CCMaths::Vector4 *)new CCMaths::Vector4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_new_Vector4__SWIG_1(float jarg1) {
  void * jresult ;
  float arg1 ;
  CCMaths::Vector4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  result = (CCMaths::Vector4 *)new CCMaths::Vector4(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_new_Vector4__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  CCMaths::Vector4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (CCMaths::Vector4 *)new CCMaths::Vector4(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_new_Vector4__SWIG_3(void * jarg1, float jarg2) {
  void * jresult ;
  CCMaths::Vector3 *arg1 = 0 ;
  float arg2 ;
  CCMaths::Vector4 *result = 0 ;
  
  arg1 = (CCMaths::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CCMaths::Vector3 const & type is null", 0);
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = (CCMaths::Vector4 *)new CCMaths::Vector4((CCMaths::Vector3 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector4_operator_add__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  CCMaths::Vector4 *arg2 = 0 ;
  CCMaths::Vector4 result;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  arg2 = (CCMaths::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CCMaths::Vector4 const & type is null", 0);
    return 0;
  } 
  result = ((CCMaths::Vector4 const *)arg1)->operator +((CCMaths::Vector4 const &)*arg2);
  jresult = new CCMaths::Vector4((const CCMaths::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector4_operator_add__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float arg2 ;
  CCMaths::Vector4 result;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((CCMaths::Vector4 const *)arg1)->operator +(arg2);
  jresult = new CCMaths::Vector4((const CCMaths::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector4_operator_substract__SWIG_0(void * jarg1) {
  void * jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  CCMaths::Vector4 result;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  result = ((CCMaths::Vector4 const *)arg1)->operator -();
  jresult = new CCMaths::Vector4((const CCMaths::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector4_operator_substract__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  CCMaths::Vector4 *arg2 = 0 ;
  CCMaths::Vector4 result;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  arg2 = (CCMaths::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CCMaths::Vector4 const & type is null", 0);
    return 0;
  } 
  result = ((CCMaths::Vector4 const *)arg1)->operator -((CCMaths::Vector4 const &)*arg2);
  jresult = new CCMaths::Vector4((const CCMaths::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector4_operator_substract__SWIG_2(void * jarg1, float jarg2) {
  void * jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float arg2 ;
  CCMaths::Vector4 result;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  result = ((CCMaths::Vector4 const *)arg1)->operator -(arg2);
  jresult = new CCMaths::Vector4((const CCMaths::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector4_Dot__SWIG_0(void * jarg1, void * jarg2) {
  float jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  CCMaths::Vector4 *arg2 = 0 ;
  float result;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  arg2 = (CCMaths::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CCMaths::Vector4 const & type is null", 0);
    return 0;
  } 
  result = (float)((CCMaths::Vector4 const *)arg1)->Dot((CCMaths::Vector4 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector4_SquareLength(void * jarg1) {
  float jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  result = (float)((CCMaths::Vector4 const *)arg1)->SquareLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Vector4_Length(void * jarg1) {
  float jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  float result;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  result = (float)((CCMaths::Vector4 const *)arg1)->Length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector4_Normalize__SWIG_0(void * jarg1) {
  void * jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  CCMaths::Vector4 *result = 0 ;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  result = (CCMaths::Vector4 *) &(arg1)->Normalize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector4_Normalized__SWIG_0(void * jarg1) {
  void * jresult ;
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  CCMaths::Vector4 result;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  result = ((CCMaths::Vector4 const *)arg1)->Normalized();
  jresult = new CCMaths::Vector4((const CCMaths::Vector4 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector4_XAxis_get() {
  void * jresult ;
  CCMaths::Vector4 *result = 0 ;
  
  result = (CCMaths::Vector4 *)&CCMaths::Vector4::XAxis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector4_YAxis_get() {
  void * jresult ;
  CCMaths::Vector4 *result = 0 ;
  
  result = (CCMaths::Vector4 *)&CCMaths::Vector4::YAxis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector4_ZAxis_get() {
  void * jresult ;
  CCMaths::Vector4 *result = 0 ;
  
  result = (CCMaths::Vector4 *)&CCMaths::Vector4::ZAxis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector4_WAxis_get() {
  void * jresult ;
  CCMaths::Vector4 *result = 0 ;
  
  result = (CCMaths::Vector4 *)&CCMaths::Vector4::WAxis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector4_Zero_get() {
  void * jresult ;
  CCMaths::Vector4 *result = 0 ;
  
  result = (CCMaths::Vector4 *)&CCMaths::Vector4::Zero;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Vector4_One_get() {
  void * jresult ;
  CCMaths::Vector4 *result = 0 ;
  
  result = (CCMaths::Vector4 *)&CCMaths::Vector4::One;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_delete_Vector4(void * jarg1) {
  CCMaths::Vector4 *arg1 = (CCMaths::Vector4 *) 0 ;
  
  arg1 = (CCMaths::Vector4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_TAU_get() {
  float jresult ;
  float result;
  
  result = (float)CCMaths::TAU;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_PI_get() {
  float jresult ;
  float result;
  
  result = (float)CCMaths::PI;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_DEG2RAD_get() {
  float jresult ;
  float result;
  
  result = (float)CCMaths::DEG2RAD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_RAD2DEG_get() {
  float jresult ;
  float result;
  
  result = (float)CCMaths::RAD2DEG;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_ToRadians(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)CCMaths::ToRadians(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_ToDegrees(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)CCMaths::ToDegrees(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Cos(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)CCMaths::Cos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Sin(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)CCMaths::Sin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Tan(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)CCMaths::Tan(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Atan(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)CCMaths::Atan(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCEngine_Sqrt(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)CCMaths::Sqrt(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCEngine_BoolPattern__SWIG_0(int jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  int arg1 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (int)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)CCMaths::BoolPattern(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CCEngine_BoolPattern__SWIG_1(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)CCMaths::BoolPattern(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CCEngine_BoolSign(unsigned int jarg1) {
  int jresult ;
  bool arg1 ;
  int result;
  
  arg1 = jarg1 ? true : false; 
  result = (int)CCMaths::BoolSign(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Transform_SetPosition(void * jarg1, void * jarg2) {
  Transform *arg1 = (Transform *) 0 ;
  CCMaths::Vector3 *arg2 = 0 ;
  
  arg1 = (Transform *)jarg1; 
  arg2 = (CCMaths::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CCMaths::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetPosition((CCMaths::Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Transform_GetPosition(void * jarg1) {
  void * jresult ;
  Transform *arg1 = (Transform *) 0 ;
  CCMaths::Vector3 result;
  
  arg1 = (Transform *)jarg1; 
  result = (arg1)->GetPosition();
  jresult = new CCMaths::Vector3((const CCMaths::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Transform_SetRotation(void * jarg1, void * jarg2) {
  Transform *arg1 = (Transform *) 0 ;
  CCMaths::Vector3 *arg2 = 0 ;
  
  arg1 = (Transform *)jarg1; 
  arg2 = (CCMaths::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CCMaths::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetRotation((CCMaths::Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Transform_GetRotation(void * jarg1) {
  void * jresult ;
  Transform *arg1 = (Transform *) 0 ;
  CCMaths::Vector3 result;
  
  arg1 = (Transform *)jarg1; 
  result = (arg1)->GetRotation();
  jresult = new CCMaths::Vector3((const CCMaths::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_Transform_SetScale(void * jarg1, void * jarg2) {
  Transform *arg1 = (Transform *) 0 ;
  CCMaths::Vector3 *arg2 = 0 ;
  
  arg1 = (Transform *)jarg1; 
  arg2 = (CCMaths::Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CCMaths::Vector3 const & type is null", 0);
    return ;
  } 
  (arg1)->SetScale((CCMaths::Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_Transform_GetScale(void * jarg1) {
  void * jresult ;
  Transform *arg1 = (Transform *) 0 ;
  CCMaths::Vector3 result;
  
  arg1 = (Transform *)jarg1; 
  result = (arg1)->GetScale();
  jresult = new CCMaths::Vector3((const CCMaths::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_delete_Transform(void * jarg1) {
  Transform *arg1 = (Transform *) 0 ;
  
  arg1 = (Transform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_new_CameraComponent(void * jarg1) {
  void * jresult ;
  Entity *arg1 = 0 ;
  CameraComponent *result = 0 ;
  
  arg1 = (Entity *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Entity & type is null", 0);
    return 0;
  } 
  result = (CameraComponent *)new CameraComponent(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_delete_CameraComponent(void * jarg1) {
  CameraComponent *arg1 = (CameraComponent *) 0 ;
  
  arg1 = (CameraComponent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_CameraComponent_m_camera_set(void * jarg1, void * jarg2) {
  CameraComponent *arg1 = (CameraComponent *) 0 ;
  Camera arg2 ;
  Camera *argp2 ;
  
  arg1 = (CameraComponent *)jarg1; 
  argp2 = (Camera *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Camera", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_camera = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_CameraComponent_m_camera_get(void * jarg1) {
  void * jresult ;
  CameraComponent *arg1 = (CameraComponent *) 0 ;
  Camera result;
  
  arg1 = (CameraComponent *)jarg1; 
  result =  ((arg1)->m_camera);
  jresult = new Camera((const Camera &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCEngine_CameraComponent_m_transform_set(void * jarg1, void * jarg2) {
  CameraComponent *arg1 = (CameraComponent *) 0 ;
  Transform *arg2 = (Transform *) 0 ;
  
  arg1 = (CameraComponent *)jarg1; 
  arg2 = (Transform *)jarg2; 
  if (arg1) (arg1)->m_transform = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CCEngine_CameraComponent_m_transform_get(void * jarg1) {
  void * jresult ;
  CameraComponent *arg1 = (CameraComponent *) 0 ;
  Transform *result = 0 ;
  
  arg1 = (CameraComponent *)jarg1; 
  result = (Transform *) ((arg1)->m_transform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT Component * SWIGSTDCALL CSharp_CCEngine_Behaviour_SWIGUpcast(Behaviour *jarg1) {
    return (Component *)jarg1;
}

SWIGEXPORT Behaviour * SWIGSTDCALL CSharp_CCEngine_Transform_SWIGUpcast(Transform *jarg1) {
    return (Behaviour *)jarg1;
}

SWIGEXPORT Behaviour * SWIGSTDCALL CSharp_CCEngine_CameraComponent_SWIGUpcast(CameraComponent *jarg1) {
    return (Behaviour *)jarg1;
}

#ifdef __cplusplus
}
#endif

